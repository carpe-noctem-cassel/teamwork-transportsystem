Teamarbeit Mini-Protokol

19.04.  Auftakttreffen Teamarbeit

23.04.  Klaerung des Arbeitsauftrags / Teamfindung
- C++ Gui, die eine ROS-Nachricht schickt
- Taster zum erkennen von Gewicht
- Korb auf den Turtlebot stellen zum Transport
- Optional: RFID-Leser mit Tags (z.B. in Tassen)
- Auftrag: Ubuntu 16.04 installieren und ROS-Tutorials durcharbeiten

30.04.  Konkretisierung der Auftraege und Probleme / Arbeitsteilung
- Zugang zu Repositories
- Ausmessen der Flaeche des Turtlebots (20 x 12 cm)
- Erstellen einer Readme-Datei mit Details zur Kommunikation mit dem Roboter
- Priorisierung / Auswahl der Arbeitsauftraege
- Aufteilung der Auftraege nach persoenlichen Praeferenzen
- GUI soll mit QT oder Chromium gemacht werden

07.05. Besprechung der UI und Hardware
- Entscheidung fuer QT als UI
- Weitere Besprechung der Hardware

14.05. Besprechung des Auftrages mit Betreuer
- Konkretisierung der Verbindung von Computer zu Roboter
- Antwort auf die Frage: Wo muss was hinzugefuegt werden?
- Aufteilung der Arbeit (zuerst Recherche)

21.05. Pfingstmontag (Frei)

28.05. Roboter fahren lassen
- Starten des Laptops fuer einen Turtlebot
- rviz-Darstellung von:
  - Weltbild des Roboters (2D-Map)
  - Lokale und Globale Costmap fuer die Wegberechnung
  - Fahren des Roboters durch klicken auf die Karte
- Konkretisierung der UI

04.06. Festhalten eines Protokols und Fehlersuche
- Installieren von rqt auf einem Laptop
- Arbeit am Build der Roboter-Dateien (nicht erfolgreich)

11.06. Besprechung des Tasters, Kompilierungsversuche
- Verwendung von rosserial_arduiono zum erstellen von ROS-Nachrichten
- Versuch Turtlebot auf Laptop zu kompilieren (mit Hilfe von Betreuer)

18.06. Arbeit an der Hardware
- Testen des Tasters mit ROS
- Versuch rosserial auf Turtlebot-Laptop zu installieren (ohne Erfolg)

25.06. Leichte Verzweiflung
- Installieren von rosserial auf dem Turtlebot-Laptop
- Testen des Tasters auf dem Turtlebot-Laptop
- Beheben von Fehlern in der UI

02.07. Installieren von Turtlebot auf Laborrechner
- Einbinden des Tasters in das ttb_worldmodel (Input von Betreuer)
- Installieren von Turtlebot auf Laborrechner

06.07. Zwischentreffen mit den Betreuern

19.07. Verbesserung der UI
- Schlechtes Copy-Paste
- Testen von Buttons und ComboBoxen
- Hinzufuegen von File-Lesen und Publisher (noch ohne msg-Format)

26.07. Weitere Verbesserung der UI
- Verbesserung der Configurations-File
- Turtlebot laden (konnte desswegen nicht verwendet werden)

02.08. Hinzuf체gen korrekter ROS-Nachrichten
- Verwenden von Pose_Stamped zum verschicken einer Nachricht
- Turtlebot-Akku scheint kaputt zu sein
- Beim Teilen der Zahlen m체ssen diese mit einem "," getrennt werden anstatt mit einem "." (wieso?)

09.08. Arbeit mit dem Turtlebot
- Problem beim Versenden der Nachrichten an den Turtlebot (Fix durch deaktivieren von Netzwerk 1)
- Hinzuf체gen von Error handling bei schlecht formatierter Config-Datei
- Senden von Movement-Nachrichten an den Turtlebot (funktioniert)
- Positionen auf der Karte sind Absolut und nicht relativ zum Turtlebot
- Ver채nderung des Arduino-Skriptes, sodass es jede Sekunde eine Nachricht schickt
- Erstellen eines Prototyp-Korbes aus einer Haribo-Trommel

16.08. Einbinden des Tasters
- Einbinden des Tasters in das World Model
- Besprechung einer Verbesserung der GUI Dateien
- Planung fuer naechstes mal: Verwenden von ttb/wm/topology/TopologicalModel.cpp mit der Funktion readTopologyFromConfig
- Verwenden der Datei: etc/TopologicalModel.config

23.08. Verbessern der UI
- Einbinden der existierenden Punkte-Datei in die UI
- Anbringen der Transportvorrichtung an den Turtlebot

30.08. Senden der Punkte
- Anpassen der UI zum Verwenden von Unterpunkten
- Korrektes Einbinden der Punkte in die UI (Kartendaten entsprechen nicht akkurat Roboter-Daten)

07.09. Start der Dokumentation
- Aufteilung der Dokumentationsarbeit auf die Mitglieder
- Diskusion der Themen und Aufbau einer Dokument-Struktur

14.09. Weitere Arbeit an der Dokumentation
- Besprechung der Struktur
- Festlegen von Stichpunkten anhand der gemeinsamen Arbeit
- Aufteilung von Unterthemen
